1번) 시작 단수와 끝 단수를 입력받은 후 구구단 출력

Scanner sc = new Scanner(System.in);  
		
System.out.print("단수 입력 : ");
String startDan = sc.next();
    
System.out.print("단수 입력 : ");
String endDan = sc.next();

int startI = Integer.parseInt(startDan);
int startE = Integer.parseInt(endDan);

// 시작 단수와 끝 단수가 반대로 입력됐다면 ? - 순서 조정
if (startI > startE) {
    int instanceNum = startI;
    startI = startE;
    startE = instanceNum;
}

for (int i = startI; i <= startE ; i++) {
    for (int j = 1; j <= 9; j++) {
        System.out.printf("%d X %d = %2d  ", i, j, (i * j) );
    }
    System.out.println();
}

2번) 로또 번호 생성기 - 중복 제거

Random rand = new Random( System.currentTimeMillis() );
for (int i = 1; i <= 5; i++) {

    HashSet<Integer> HS = new HashSet<>();

    System.out.print(i + "회");

    for (int j = 1; j <= 6; j++) {
        int ranNum = rand.nextInt(45) + 1;
        while(HS.contains(ranNum)) {
            ranNum = rand.nextInt(45) + 1;
        }
        HS.add(ranNum);
        System.out.printf(" %2d", ranNum);
    }

    System.out.println();
}

// 중복을 제거하려면 생성된 랜덤한 번호를 저장해둘 필요가 있었음.
// 중복을 허용하지 않는 자료구조 HashSet 이용 ( contains를 통해 중복 여부 파악 )
// 이전 회차와 다음 회차 사이의 중복은 허용되므로 다음 회차엔 다시 HashSet 생성


3번) 5명에 대한 학번, 이름, 국어점수, 영어점수, 수학점수를 입력받아서 출력하는 프로그램

// 새로운 클래스 생성 - ArrayList 활용해보기
// 생성자는 재정의할 필요가 없다고 느낌 - 받아오는 입력값으로 set 할 예정
class StudentPractice {
    private int id;
    private String name;
    private int koreanScore;
    private int englishScore;
    private int mathScore;

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public int getKoreanScore() {
        return koreanScore;
    }

    public void setKoreanScore(int koreanScore) {
        this.koreanScore = koreanScore;
    }

    public int getEnglishScore() {
        return englishScore;
    }

    public void setEnglishScore(int englishScore) {
        this.englishScore = englishScore;
    }

    public int getMathScore() {
        return mathScore;
    }

    public void setMathScore(int mathScore) {
        this.mathScore = mathScore;
    }
}

public void static main(String[] args) {
	Scanner sc = new Scanner(System.in);  
	ArrayList<StudentPractice> list = new ArrayList<>();
	for (int i = 1; i <= 5; i++) {
	    StudentPractice s = new StudentPractice();
	
	    System.out.printf(i + "번 학생 학번 입력 : ");
	    String id = sc.next();
	    s.setId(Integer.parseInt(id));
	
	    System.out.printf(i + "번 학생 이름 입력 : ");
	    String name = sc.next();
	    s.setName(name);
	
	    System.out.printf(i + "번 학생 국어점수 입력 : ");
	    String korScore = sc.next();
	    s.setKoreanScore(Integer.parseInt(korScore));
	
	    System.out.printf(i + "번 학생 영어점수 입력 : ");
	    String englishScore = sc.next();
	    s.setEnglishScore(Integer.parseInt(englishScore));
	
	    System.out.printf(i + "번 학생 수학점수 입력 : ");
	    String mathScore = sc.next();
	    s.setMathScore(Integer.parseInt(mathScore));
	
	    list.add(s);
	}
	
	System.out.println("학번  이름  국어 영어 수학");
	for(StudentPractice s : list) {
	    System.out.printf("%2d  %s  %3d %3d %3d%n", s.getId(), s.getName(), s.getKoreanScore(), s.getEnglishScore(), s.getMathScore());
	}
}

// 2차원 배열들을 만들기 보다 현업에서 많이 사용하는 방법을 사용해보기로함
// 문제에 알맞는 클래스 생성 필요 -> 캡슐화 진행


=> 3번 문제 각각의 항목들을 입력받는다고 해서 다 Scanner와 System.in 을 사용해서 구현했는데, 미리 객체를 만들고 배열로 만드셨음.
=> 생성자는 필요하지만 setter 메서드는 필요없었다.
